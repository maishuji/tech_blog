name: Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
      - 'prod/**' # Matches any branch under prod, e.g., prod/feature-branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        # Set up the SSH private key
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/id_rsa
        # Add EC2 host to known hosts to avoid SSH prompt
        ssh-keyscan -H 13.61.104.192 >> ~/.ssh/known_hosts
        ls -la ~/.ssh

    - name: Copy files via SSH
      run: |
        # Copy your application files to the EC2 instance
        ls -la .
        pwd
        ls ~/.ssh/*
        ssh ubuntu@13.61.104.192 'mkdir -p ~/app && chmod 755 ~/app'
        scp -r blog_heho docker-compose.prod.yml docker-compose.yml \
        Dockerfile.prod requirements.prod.txt ubuntu@13.61.104.192:~/app/
    - name: Set up environment variables on EC2
      env:
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      run: |
        ssh ubuntu@13.61.104.192 "
          # Export the environment variables for Docker Compose usage
          echo 'export EMAIL_HOST_USER=$EMAIL_HOST_USER' >> ~/.profile
          echo 'export EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD' >> ~/.profile
          echo 'export EMAIL_HOST=$EMAIL_HOST' >> ~/.profile
          echo 'export EMAIL_PORT=$EMAIL_PORT' >> ~/.profile
          source ~/.profile
        "

    - name: Deploy with Docker Compose
      env: 
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      run: |
        ssh ubuntu@13.61.104.192 '
          # Retrieve env variables from profile before doing docker-compose
          source ~/.profile

          # Navigate to the application directory
          cd ~/app
          
          # Pull the latest images (if using a Docker registry) or build them
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull

          # Stop and remove any existing containers
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down

          # Build and start containers in detached mode
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build -d
        '
